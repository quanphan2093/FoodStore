@page
@model FoodStoreClient.Pages.Admin.Restoran_Management_Order.Management_OrderModel
@{
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Order Management - Restoran</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="~/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/style.css" rel="stylesheet">
</head>

<body>
    <div class="container mt-5">
        <div class="bg-white p-4 rounded shadow">
            <h4 class="text-center text-primary mb-4">Order Management</h4>

            <button class="btn btn-success mb-3" onclick="openAddModal()">+ Add Order</button>

            <!-- Form lọc -->
            <form method="post" class="row mb-4">
                <div class="col-md-5">
                    <label for="from" class="form-label">From:</label>
                    <input type="date" class="form-control" id="fromDate" name="from"
                           max="@Model.dateNow?.ToString("yyyy-MM-dd")"
                           min="@Model.datePast?.ToString("yyyy-MM-dd")"
                           value="@Model.dateSevenDay?.ToString("yyyy-MM-dd")" required>
                </div>
                <div class="col-md-5">
                    <label for="to" class="form-label">To:</label>
                    <input type="date" class="form-control" id="toDate" name="to"
                           max="@Model.dateNow?.ToString("yyyy-MM-dd")"
                           min="@Model.datePast?.ToString("yyyy-MM-dd")"
                           value="@Model.dateNow?.ToString("yyyy-MM-dd")" required>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <input type="submit" class="btn btn-primary w-100" value="Filter">
                </div>
            </form>

            <!-- Bảng đơn hàng -->
            @if (Model.FilteredOrders != null && Model.FilteredOrders.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th>Order ID</th>
                            <th>Customer ID</th>
                            <th>Total (vnđ)</th>
                            <th>Order Date</th>
                            <th>Status</th>
                            <th>Created At</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.FilteredOrders)
                        {
                            <tr>
                                <td>@order.OrderId</td>
                                <td>@(order.CustomerId ?? 0)</td>
                                <td>@(string.Format("{0:N0}", order.Gtotal ?? 0))</td>
                                <td>@(order.OrderDate?.ToString("dd/MM/yyyy") ?? "-")</td>
                                <td>
                                    <span class="badge
                                        @(order.Status?.Trim().ToLower() == "completed" ? "bg-primary" :
                                          order.Status?.Trim().ToLower() == "pending" ? "bg-success" :
                                          order.Status?.Trim().ToLower() == "cancelled" ? "bg-warning text-dark" : "bg-secondary")">
                                        @order.Status
                                    </span>
                                </td>
                                <td>@(order.CreateAt?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                                <td>
                                    <button class="btn btn-sm btn-warning" onclick="openEditModal(@order.OrderId)">✏️</button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteOrder(@order.OrderId)">🗑️</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info text-center">No orders found in selected range.</div>
            }
        </div>
    </div>

    <!-- Modal Add/Edit -->
    <div class="modal" tabindex="-1" id="orderModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Add/Edit Order</h5>
                    <button type="button" class="btn-close" onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="orderId" />
                    <div class="mb-2">
                        <label>Customer ID</label>
                        <input type="number" class="form-control" id="customerId" />
                    </div>
                    <div class="mb-2">
                        <label>Total</label>
                        <input type="number" class="form-control" id="gtotal" />
                    </div>
                    <div class="mb-2">
                        <label>Status</label>
                        <input type="text" class="form-control" id="status" />
                    </div>
                    <div class="mb-2">
                        <label>Order Date</label>
                        <input type="date" class="form-control" id="orderDate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button class="btn btn-primary" onclick="saveOrder()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let editingId = null;

        function openAddModal() {
            editingId = null;
            document.getElementById("modalTitle").textContent = "Add Order";
            document.getElementById("orderId").value = "";
            document.getElementById("customerId").value = "";
            document.getElementById("gtotal").value = "";
            document.getElementById("status").value = "";
            document.getElementById("orderDate").value = "";
            showModal();
        }

        function openEditModal(id) {
            const order = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.FilteredOrders));
            const o = order.find(x => x.OrderId === id);
            if (!o) return alert("Order not found");

            editingId = id;
            document.getElementById("modalTitle").textContent = "Edit Order";
            document.getElementById("orderId").value = o.OrderId;
            document.getElementById("customerId").value = o.CustomerId;
            document.getElementById("gtotal").value = o.Gtotal;
            document.getElementById("status").value = o.Status;
            document.getElementById("orderDate").value = o.OrderDate?.split("T")[0];

            showModal();
        }

        function showModal() {
            const modal = new bootstrap.Modal(document.getElementById("orderModal"));
            modal.show();
        }

        function closeModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById("orderModal"));
            modal.hide();
        }

        async function saveOrder() {
            const isEdit = !!editingId;
            const payload = {
                customerId: Number(document.getElementById("customerId").value) || 0,
                gtotal: Number(document.getElementById("gtotal").value) || 0,
                status: document.getElementById("status").value.trim(),
                orderDate: document.getElementById("orderDate").value
            };

            if (isEdit) payload.orderId = editingId;

            const method = editingId ? "PUT" : "POST";
            const url = editingId
                ? "http://localhost:7031/api/Order/Admin/Update"
                : "http://localhost:7031/api/Order/Admin/Add";
            console.log("Payload gửi đi:", payload);
            const response = await fetch(url, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            console.log("Server response:", responseText);

            if (response.ok) {
                alert("Saved successfully!");
                location.reload();
            } else {
                alert("Save failed:\n" + responseText);
            }
        }

        async function deleteOrder(id) {
            if (!confirm("Are you sure you want to delete this order?")) return;

            const response = await fetch(`http://localhost:7031/api/Order/Admin/Delete/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                alert("Deleted successfully!");
                location.reload();
            } else {
                alert("Delete failed.");
            }
        }
    </script>
</body>
</html>
